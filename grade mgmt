import tkinter as tk
from tkinter import messagebox, filedialog
from tkinter import ttk
import csv
import string
import webbrowser  # Added for email linking
import urllib.parse  # Added for URL encoding email content

# Global list to store all student records.
student_records = []
# Global variable to track which main section is visible ("entry" or "records").
current_section = "entry"

def get_grade(mark):
    """Return the grade for a given mark based on fixed criteria."""
    if mark >= 90:
        return "A"
    elif mark >= 80:
        return "B"
    elif mark >= 70:
        return "C"
    elif mark >= 60:
        return "D"
    else:
        return "FAIL"

def update_treeview(filter_section="All"):
    """Update the Treeview to display student records filtered by section."""
    # Clear current items in the Treeview.
    for item in student_tree.get_children():
        student_tree.delete(item)
    # Reinsert records that match the selected section filter.
    for record in student_records:
        if filter_section == "All" or record["Section"] == filter_section:
            # Insert the record into the treeview
            item_id = student_tree.insert(
                "",
                "end",
                values=(
                    record["Student Name"],
                    record["Roll Number"],
                    record["Email"],
                    record["Section"],
                    record["Physics"],
                    record["Physics Grade"],
                    record["Chemistry"],
                    record["Chemistry Grade"],
                    record["Maths"],
                    record["Maths Grade"],
                    f"{record['Average']:.2f}",
                    record["Overall Grade"],
                ),
            )
            
            # If average is less than 60, highlight the row in red
            if record["Average"] < 60:
                student_tree.item(item_id, tags=("low_avg",))

def add_student():
    """Validate inputs, calculate grades, and add the student record."""
    name = entry_name.get().strip()
    roll = entry_roll.get().strip()
    email = entry_email.get().strip()
    section = section_var.get().strip()
    phys_text = entry_physics.get().strip()
    chem_text = entry_chem.get().strip()
    math_text = entry_maths.get().strip()

    # Validate required fields.
    if not name:
        messagebox.showerror("Input Error", "Please enter the student's name.")
        return
    if not roll:
        messagebox.showerror("Input Error", "Please enter the student's roll number.")
        return
    if not email:
        messagebox.showerror("Input Error", "Please enter the student's email.")
        return
    if not section:
        messagebox.showerror("Input Error", "Please select a section.")
        return

    # Basic email validation
    if "@" not in email or "." not in email:
        messagebox.showerror("Input Error", "Please enter a valid email address.")
        return

    try:
        physics = float(phys_text)
        chemistry = float(chem_text)
        maths = float(math_text)
    except ValueError:
        messagebox.showerror("Input Error", "Please enter valid numeric values for marks.")
        return

    if not (0 <= physics <= 100 and 0 <= chemistry <= 100 and 0 <= maths <= 100):
        messagebox.showerror("Input Error", "Please enter marks between 0 and 100 for all subjects.")
        return

    # Calculate individual subject grades.
    physics_grade = get_grade(physics)
    chemistry_grade = get_grade(chemistry)
    maths_grade = get_grade(maths)

    # Calculate overall average and grade.
    average = (physics + chemistry + maths) / 3
    overall_grade = get_grade(average)

    # Create the student record.
    student_data = {
        "Student Name": name,
        "Roll Number": roll,
        "Email": email,
        "Section": section,
        "Physics": physics,
        "Physics Grade": physics_grade,
        "Chemistry": chemistry,
        "Chemistry Grade": chemistry_grade,
        "Maths": maths,
        "Maths Grade": maths_grade,
        "Average": average,
        "Overall Grade": overall_grade,
    }
    student_records.append(student_data)

    # Update the Treeview according to the current filter.
    try:
        selection = filter_listbox.curselection()
        if selection:
            filter_value = filter_listbox.get(selection[0])
        else:
            filter_value = "All"
    except NameError:
        filter_value = "All"
    update_treeview(filter_value)

    # Clear the input fields.
    entry_name.delete(0, tk.END)
    entry_roll.delete(0, tk.END)
    entry_email.delete(0, tk.END)
    entry_physics.delete(0, tk.END)
    entry_chem.delete(0, tk.END)
    entry_maths.delete(0, tk.END)
    section_var.set("A")

def export_sections_to_csv():
    """
    Export student records into separate CSV files for each section.
    The user will select a folder. For each section (e.g., A, B, etc.)
    that has records, a CSV file named "Section_<Letter>.csv" will be created.
    """
    if not student_records:
        messagebox.showerror("Export Error", "No student records available. Add a student first!")
        return

    folder_path = filedialog.askdirectory(title="Select Folder to Save CSV Files")
    if not folder_path:
        return

    # Group records by section.
    sections = {}
    for record in student_records:
        sec = record["Section"]
        if sec not in sections:
            sections[sec] = []
        sections[sec].append(record)
    
    # For each section, write a CSV file.
    for sec, records in sections.items():
        filepath = f"{folder_path}/Section_{sec}.csv"
        try:
            with open(filepath, "w", newline="") as csvfile:
                fieldnames = [
                    "Student Name", "Roll Number", "Email", "Section",
                    "Physics", "Physics Grade", "Chemistry", "Chemistry Grade",
                    "Maths", "Maths Grade", "Average", "Overall Grade"
                ]
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                writer.writeheader()
                for rec in records:
                    writer.writerow({
                        "Student Name": rec["Student Name"],
                        "Roll Number": rec["Roll Number"],
                        "Email": rec["Email"],
                        "Section": rec["Section"],
                        "Physics": rec["Physics"],
                        "Physics Grade": rec["Physics Grade"],
                        "Chemistry": rec["Chemistry"],
                        "Chemistry Grade": rec["Chemistry Grade"],
                        "Maths": rec["Maths"],
                        "Maths Grade": rec["Maths Grade"],
                        "Average": f"{rec['Average']:.2f}",
                        "Overall Grade": rec["Overall Grade"],
                    })
        except Exception as e:
            messagebox.showerror("Export Error", f"Failed to export records for section {sec}: {e}")
            return
    messagebox.showinfo("Export Successful", f"Records exported successfully to folder:\n{folder_path}")

def on_filter_select(event):
    """Callback triggered when a section is selected from the Listbox."""
    selection = filter_listbox.curselection()
    if selection:
        filter_value = filter_listbox.get(selection[0])
        update_treeview(filter_value)

def toggle_sections():
    """Toggle the view between the entry section and the records section."""
    global current_section
    if current_section == "entry":
        entry_frame.pack_forget()
        records_frame.pack(fill="both", expand=True, padx=10, pady=10)
        toggle_button.config(text="Switch to Entry Section")
        current_section = "records"
    else:
        records_frame.pack_forget()
        entry_frame.pack(fill="x", padx=10, pady=10)
        toggle_button.config(text="Switch to Records Section")
        current_section = "entry"

def on_treeview_click(event):
    """Handle click events on the Treeview to enable email linking."""
    region = student_tree.identify_region(event.x, event.y)
    
    if region == "cell":
        # Get the row and column that was clicked
        row_id = student_tree.identify_row(event.y)
        col_id = student_tree.identify_column(event.x)
        
        # Column #3 is the Email column (index 2 in the values tuple)
        if col_id == "#3":  # Email column
            # Get all values for the clicked row
            values = student_tree.item(row_id, 'values')
            if values:
                email = values[2]  # Email is at index 2
                student_name = values[0]  # Student name is at index 0
                average = float(values[10])  # Average is at index 10
                
                if email:
                    try:
                        # Check if student average is below 60
                        if average < 60:
                            # Create email with improvement message
                            subject = "Important: Academic Performance Concern"
                            body = create_improvement_email_body(student_name, average, values[4], values[6], values[8])
                            
                            # URL encode the subject and body
                            subject_encoded = urllib.parse.quote(subject)
                            body_encoded = urllib.parse.quote(body)
                            
                            # Open email client with pre-populated content
                            webbrowser.open(f"mailto:{email}?subject={subject_encoded}&body={body_encoded}")
                        else:
                            # Regular email without template for students with good performance
                            webbrowser.open(f"mailto:{email}")
                    except Exception as e:
                        messagebox.showerror("Email Error", f"Could not open email client: {e}")

def create_improvement_email_body(student_name, average, physics, chemistry, maths):
    """Create the body text for improvement emails."""
    body = f"""Dear {student_name},

I am writing to inform you that your current academic performance requires immediate attention. Your average score across Physics, Chemistry, and Mathematics is {average:.2f}%, which is below the passing threshold of 60%.

Here is a breakdown of your current marks:
- Physics: {physics}/100
- Chemistry: {chemistry}/100
- Mathematics: {maths}/100

I would like to schedule a meeting to discuss strategies for improvement. Please reply to this email with your available times for a consultation.

Remember that academic support resources are available, including:
- Tutorial sessions every Wednesday and Friday
- Study guides on the school portal
- Peer tutoring program

With dedicated effort and proper support, I believe you can significantly improve your performance.

Best regards,
[Teacher's Name]
"""
    return body

def email_all_low_performers():
    """Email all students with average below 60%."""
    # Find all students with low averages from the currently filtered section
    low_performers = []
    
    selection = filter_listbox.curselection()
    if selection:
        current_filter = filter_listbox.get(selection[0])
    else:
        current_filter = "All"
    
    for record in student_records:
        if record["Average"] < 60:
            # Apply current section filter
            if current_filter == "All" or record["Section"] == current_filter:
                low_performers.append(record)
    
    if not low_performers:
        messagebox.showinfo("Information", "No students with averages below 60% found in the current filter.")
        return
    
    # Ask for confirmation with the count of students
    confirm = messagebox.askyesno(
        "Confirmation", 
        f"You are about to send emails to {len(low_performers)} students with averages below 60%. Continue?"
    )
    
    if not confirm:
        return
    
    # Create a single email with all low-performing students in BCC
    emails = [record["Email"] for record in low_performers]
    bcc_list = ",".join(emails)
    
    # Create a generic email for multiple recipients
    subject = "Important: Academic Performance Concerns"
    body = """Dear Students,

I am writing to inform you that your current academic performance requires immediate attention. Your average scores across Physics, Chemistry, and Mathematics are below the passing threshold of 60%.

Please check your individual grades in the student portal.

I would like to schedule meetings to discuss strategies for improvement. Please reply to this email with your available times for a consultation.

Remember that academic support resources are available, including:
- Tutorial sessions every Wednesday and Friday
- Study guides on the school portal
- Peer tutoring program

With dedicated effort and proper support, I believe you can significantly improve your performance.

Best regards,
[Teacher's Name]
"""
    
    try:
        # URL encode the subject and body
        subject_encoded = urllib.parse.quote(subject)
        body_encoded = urllib.parse.quote(body)
        
        # Open email client with pre-populated content and BCC list
        webbrowser.open(f"mailto:?bcc={bcc_list}&subject={subject_encoded}&body={body_encoded}")
        
        # Show confirmation
        messagebox.showinfo(
            "Email Initiated", 
            f"An email draft has been created for {len(low_performers)} students. Your email client should now open."
        )
    except Exception as e:
        messagebox.showerror("Email Error", f"Could not open email client: {e}")

# --------------------------
# Main Window Setup
# --------------------------
root = tk.Tk()
root.title("Student Grade System")
root.geometry("1200x600")  # Set a larger initial window size

# Use ttk for theming.
style = ttk.Style(root)
if "clam" in style.theme_names():
    style.theme_use("clam")

# Toggle Button to switch sections.
toggle_button = ttk.Button(root, text="Switch to Records Section", command=toggle_sections)
toggle_button.pack(pady=10)

# --------------------------
# Student Entry Section
# --------------------------
entry_frame = ttk.Frame(root, padding="20")
entry_frame.pack(fill="x", padx=10, pady=10)

# Title for the entry section.
ttk.Label(entry_frame, text="Enter Student Details", font=("Helvetica", 14, "bold")).grid(
    row=0, column=0, columnspan=2, pady=10
)

ttk.Label(entry_frame, text="Student Name:").grid(row=1, column=0, sticky="E", pady=5)
entry_name = ttk.Entry(entry_frame, width=30)
entry_name.grid(row=1, column=1, pady=5)

ttk.Label(entry_frame, text="Roll Number:").grid(row=2, column=0, sticky="E", pady=5)
entry_roll = ttk.Entry(entry_frame, width=30)
entry_roll.grid(row=2, column=1, pady=5)

ttk.Label(entry_frame, text="Email:").grid(row=3, column=0, sticky="E", pady=5)
entry_email = ttk.Entry(entry_frame, width=30)
entry_email.grid(row=3, column=1, pady=5)

ttk.Label(entry_frame, text="Section:").grid(row=4, column=0, sticky="E", pady=5)
section_var = tk.StringVar()
section_combobox = ttk.Combobox(
    entry_frame, textvariable=section_var, values=list(string.ascii_uppercase), state="readonly", width=28
)
section_combobox.grid(row=4, column=1, pady=5)
section_combobox.set("A")

ttk.Label(entry_frame, text="Physics Marks:").grid(row=5, column=0, sticky="E", pady=5)
entry_physics = ttk.Entry(entry_frame, width=30)
entry_physics.grid(row=5, column=1, pady=5)

ttk.Label(entry_frame, text="Chemistry Marks:").grid(row=6, column=0, sticky="E", pady=5)
entry_chem = ttk.Entry(entry_frame, width=30)
entry_chem.grid(row=6, column=1, pady=5)

ttk.Label(entry_frame, text="Maths Marks:").grid(row=7, column=0, sticky="E", pady=5)
entry_maths = ttk.Entry(entry_frame, width=30)
entry_maths.grid(row=7, column=1, pady=5)

btn_frame = ttk.Frame(entry_frame)
btn_frame.grid(row=8, column=0, columnspan=2, pady=10)
btn_add_student = ttk.Button(btn_frame, text="Add Student", command=add_student)
btn_add_student.grid(row=0, column=0, padx=5)
# New Export Button that saves separate CSV files for each section.
btn_export_sections = ttk.Button(btn_frame, text="Export Section-wise CSV", command=export_sections_to_csv)
btn_export_sections.grid(row=0, column=1, padx=5)

# --------------------------
# Student Records Section
# --------------------------
records_frame = ttk.Frame(root, padding="20")
# Initially, hide the records section.
records_frame.pack(fill="both", expand=True, padx=10, pady=10)
records_frame.pack_forget()

ttk.Label(records_frame, text="Student Records", font=("Helvetica", 14, "bold")).grid(
    row=0, column=0, columnspan=2, pady=10
)

# Create the Listbox for filtering by section.
filter_label = ttk.Label(records_frame, text="Select Section:")
filter_label.grid(row=1, column=0, sticky="nw")
filter_listbox = tk.Listbox(records_frame, height=10, exportselection=0)
filter_listbox.insert(tk.END, "All")
for letter in string.ascii_uppercase:
    filter_listbox.insert(tk.END, letter)
filter_listbox.grid(row=2, column=0, sticky="n", padx=(0, 10))
filter_listbox.bind("<<ListboxSelect>>", on_filter_select)
filter_listbox.select_set(0)  # Default selection is "All"
filter_listbox.event_generate("<<ListboxSelect>>")

# Create the Treeview to display student records.
columns = (
    "Student Name", "Roll Number", "Email", "Section",
    "Physics", "Phy Grade", "Chemistry", "Chem Grade",
    "Maths", "Math Grade", "Average", "Overall Grade"
)
student_tree = ttk.Treeview(records_frame, columns=columns, show="headings", height=15)
for col in columns:
    student_tree.heading(col, text=col)
    student_tree.column(col, anchor="center", width=90)

# Add cursor change for email column to indicate clickable
student_tree.column("Email", anchor="center", width=150)  # Make email column wider

# Configure tag for students with low average (less than 60)
student_tree.tag_configure("low_avg", background="#ffcccc", foreground="red")

# Bind click event to the Treeview
student_tree.bind("<ButtonRelease-1>", on_treeview_click)

student_tree.grid(row=1, column=1, rowspan=2, sticky="nsew")

# Attach a vertical scrollbar to the Treeview.
scrollbar = ttk.Scrollbar(records_frame, orient="vertical", command=student_tree.yview)
student_tree.configure(yscroll=scrollbar.set)
scrollbar.grid(row=1, column=2, rowspan=2, sticky="ns")

# Create a frame for email functionality buttons
email_btn_frame = ttk.Frame(records_frame)
email_btn_frame.grid(row=3, column=1, pady=(5, 0), sticky="w")

# Add "Email All Low Performers" button
btn_email_all = ttk.Button(
    email_btn_frame, 
    text="Email All Low Performers", 
    command=email_all_low_performers,
    style="Accent.TButton"  # Custom style for emphasis
)
btn_email_all.pack(side="left", padx=(0, 10))

# Create custom style for the button
style.configure("Accent.TButton", background="#ff6b6b", foreground="black")

# Create help label to indicate email linking feature
email_help_label = ttk.Label(email_btn_frame, text="or click on any student's email to send individual messages", 
                             font=("Helvetica", 9, "italic"), foreground="blue")
email_help_label.pack(side="left")

# Create additional help text for auto-generated emails
email_template_label = ttk.Label(records_frame, text="Emails for students with low averages include an auto-generated improvement message", 
                              font=("Helvetica", 9, "italic"), foreground="blue")
email_template_label.grid(row=4, column=1, pady=(5, 5), sticky="w")

# Create legend for the highlighting
highlight_frame = ttk.Frame(records_frame)
highlight_frame.grid(row=5, column=1, pady=(0, 5), sticky="w")

highlight_sample = ttk.Label(highlight_frame, text="  ", background="#ffcccc", relief="solid", width=2)
highlight_sample.pack(side="left", padx=(0, 5))

highlight_text = ttk.Label(highlight_frame, text="Students with average below 60", 
                          font=("Helvetica", 9, "italic"), foreground="red")
highlight_text.pack(side="left")

# Configure grid weight for proper resizing.
records_frame.columnconfigure(1, weight=1)
records_frame.rowconfigure(1, weight=1)

root.mainloop()
